version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy Back-End Stack
          when: on_fail
          command:         
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>

      - run: 
          name: Destroy Front-End Stack
          when: on_fail
          command: 
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      id:
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/migrations_<< parameters.id >>)
            echo $SUCCESS
            if(( $SUCCESS == 1 )); 
            then
              cd ./backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              # exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run: 
          name: Test Front-End
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run: 
          name: Test Back-End
          command: |
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run: 
          name: Scan Front-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run: 
          name: Scan Back-End
          command: |
            cd backend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      # - slack/notify:
      #     channel: C03DAJYL3SM
      #     event: fail
      #     template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install Dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              # exit 1
      - run:
          name: Read back-end ip and store in kvdb.io
          command: |
            # Your code her
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAdrress' \
              --output text >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt

            # echo "public_IP=${public_IP}"
            # curl https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/public_IP --data-binary '${public_IP}'
            # exit 1

      # - run: 
      #     name: add public IP to inventory.txt
      #     command: |
      #       pwd
      #       public_IP=$(curl https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/public_IP)
      #       echo ${public_IP} >> ./.circleci/ansible/inventory.txt
      #       cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORFLOW_ID:0:7}         
      
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: alpine:3.16.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [14:a3:98:7a:9a:f6:e8:42:1a:1f:41:0b:4d:3f:84:2f]      
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update --no-cache tar gzip ansible aws-cli
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            # cd .circleci/ansible
            
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            cat .circleci/ansible/inventory.txt
            # exit 1
          no_output_timeout: 15m
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORFLOW_ID:0:7}
          
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:18.4.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - attach_workspace:
          at: .  
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            pwd
            npm install
            # npm audit fix --audit-level=critical --force
            npm run migrations > migrations_dump.txt
            cat ./migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully" ./backend/migrations_dump.txt
            then
              echo "DB migration has been successful"
              curl https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/migrations_$\{CIRCLE_WORKFLOW_ID:0:7\} -d '1'
            # else
            #   echo "DB migration has failed, Verify DB setup"
            #   # curl https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/migrations_$\{CIRCLE_WORKFLOW_ID:0:7\} -d '0'
            fi 
            echo $(curl --insecure https://kvdb.io/7DNnXarzb2DE8b7NZKmwmv/migrations_$\{CIRCLE_WORKFLOW_ID:0:7\})
            # exit 1
          
     # Here's where you will add some code to rollback on failure
      # - revert-migrations:
      #     id: ${CIRCLE_WORFLOW_ID:0:7}  
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORFLOW_ID:0:7}             

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - restore_cache:
          keys:
            - frontend-build
      - attach_workspace:
          at: .  
      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # Here's where you will add some code to rollback on failure
      # - revert-migrations:
      #     id: ${CIRCLE_WORFLOW_ID:0:7}    
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORFLOW_ID:0:7} 
                            
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: [9f:a2:83:62:ee:48:11:0f:80:1e:0e:ec:e4:f8:79:4a]
      # Add ssh keys with fingerprint
      - restore_cache:
          keys: [backend_build]
      - attach_workspace:
          at: . 
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip ansible
            apk add --update ansible
            apk add --update nodejs
            apk add curl
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz
            mkdir -p ~project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            export ANSIBLE_HOST_KEY_CHECKING=false
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - save_cache:
          paths: [frontend/node_modules]
          key: backend-build
      # Here's where you will add some code to rollback on failure 
      - revert-migrations:
          id: ${CIRCLE_WORFLOW_ID:0:7}        
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORFLOW_ID:0:7} 
      
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:3.16.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status" -v
            # if curl -s "${API_URL}/api/status" | grep "ok"
            # then
            #     return 0
            # else
            #     return 1
            # fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                return 1
            else
                return 1
            fi
      # Here's where you will add some code to rollback on failure 
      # - destroy-environment:
      #     when: on_fail
      #     id: ${CIRCLE_WORFLOW_ID:0:7}        

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     workflowID: ${CIRCLE_WORFLOW_ID:0:7}         

# cleanup:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldworkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          # context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]